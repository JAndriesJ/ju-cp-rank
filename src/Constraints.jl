module Constraints

proj_dir = dirname(@__FILE__)*"\\"
include(proj_dir*"Utility.jl")
include(proj_dir*"Moments.jl")
using .Utility
using .Moments

export  make_dag_con,
        make_loc_con,
        make_xx_con,
        make_weakG_con,
        make_G_con


"""
input: A(Data matrix),t(integer),Lx(JuMP variable)
output: dictionary: keys:
comment: L(gu) ‚â• 0 for g ‚àà {1} ‚à™ S·∂ú·µñ_A and u ‚àà [x]_2t‚àídeg(g)
"""
function make_dag_con(A,t,Lx)
    n = size(A)[1]
    dag_con = Dict()

    mom‚ÇÇ‚Çú     = Moments.make_mon_expo(n,2*t)
    nb2t      = lastindex(mom‚ÇÇ‚Çú)
    dag_con[(0,0)] = [ 1*Lx[mom‚ÇÇ‚Çú[i] ] for i in  1:nb2t] # This is the non negativity of the moments i.e. products of x's

    deg_g = 2
    mom‚ÇÇ‚Çú‚Çã‚ÇÇ    = Moments.make_mon_expo(n,2*t-deg_g)
    nb2t‚Çã‚ÇÇ = lastindex(mom‚ÇÇ‚Çú‚Çã‚ÇÇ)
    @assert nb2t‚Çã‚ÇÇ > 1 "Contraints do not exist for t =1!"
    for k in 1:n
        e‚Çñ = Utility.e‚Çñ(n,k)
        # Dagger constraints: L((‚àöA‚Çñ‚Çñ x‚Çñ - x‚Çñ¬≤)‚ãÖu) ‚âß 0 for u ‚àà [x]‚ÇÇ‚Çú‚Çã‚ÇÇ
        sqrM‚Çñ‚Çñ = sqrt(A[k,k])
        dag_con[(k,k)] = [ sqrM‚Çñ‚Çñ*Lx[e‚Çñ + mom‚ÇÇ‚Çú‚Çã‚ÇÇ[i]] - Lx[2*e‚Çñ + mom‚ÇÇ‚Çú‚Çã‚ÇÇ[i]] for i in  1:nb2t‚Çã‚ÇÇ ]
        for h in (k+1):n
            e‚Çï = Utility.e‚Çñ(n,h)
            # Dagger constraints: L((A‚Çñ‚Çï  - x‚Çñx‚Çï)‚ãÖu) ‚âß 0 for u ‚àà [x]‚ÇÇ‚Çú‚Çã‚ÇÇ
            dag_con[(k,h)] = [ A[k,h]*Lx[mom‚ÇÇ‚Çú‚Çã‚ÇÇ[i]] - Lx[e‚Çñ + e‚Çï + mom‚ÇÇ‚Çú‚Çã‚ÇÇ[i]]     for i in  1:nb2t‚Çã‚ÇÇ]
        end
    end
    return dag_con
end

"""
input: A(data array), LMB(moment exponent vector), Lx(JuMP variable)
output: dictionary: Keys: (i,j) ‚àà [n]¬≤
                    vals:
comment: L ‚â• 0 on M‚ÇÇ‚Çú(S^cp_A )
(M_2t-2(gL) )_Œ±Œ≤ =   ‚àö(A·µ¢·µ¢) x^(Œ≥ + e·µ¢)  -  x^(Œ≥ + 2*e·µ¢) M_2
(M_2t-2(gL) )_Œ±Œ≤ =   (A·µ¢‚±º) x^Œ≥   -  x^(Œ≥ + e‚ÇÅ + e‚±º) """
function make_loc_con(A,t,Lx)
    n       = size(A)[1]
    LMB     = Moments.make_mon_expo(n, t - 1)
    nb_mon  = size(LMB)[1]
    loc_con = Dict()
    for k in 1:n
        e‚Çñ = Utility.e‚Çñ(n,k)
        # Constraint: diagonal of L ‚âß 0 on ùëÄ(S·∂ú·µñ)   : M((‚àöA‚Çñ‚Çñ x‚Çñ - x‚Çñ¬≤)‚ãÖL)
        sqrA‚Çñ‚Çñ = sqrt(A[k,k])
        loc_con[(k,k)] = [sqrA‚Çñ‚Çñ*Lx[LMB[i] + LMB[j] + e‚Çñ] - Lx[LMB[i] + LMB[j] + 2*e‚Çñ]   for i in 1:nb_mon, j in 1:nb_mon ]
        for h in (k+1):n
            e‚Çï = Utility.e‚Çñ(n,h)
            # Constraint: off diagonal of L ‚âß 0 on ùëÄ(S·∂ú·µñ)   : M((A‚Çñ‚Çï - x‚Çñx‚Çï)‚ãÖL)
            loc_con[(k,h)] = [ A[k,h]*Lx[LMB[i] + LMB[j]] - Lx[LMB[i] + LMB[j] + e‚Çñ + e‚Çï] for i in 1:nb_mon,  j in 1:nb_mon ]
        end
    end
    return loc_con
end

"""
input: A(data array), LMB(moment exponent vector), Lx(JuMP variable)
output: dictionary: Keys: (h,k) ‚àà [n]¬≤, h ‚â† k
                    values:
"""
function make_xx_con(A,t,Lx)
    n       = size(A)[1]
    LMB     = Moments.make_mon_expo(n,t-1)
    nb_mon  = size(LMB)[1]
    xx_con  = Dict()
    for k in 1:n
        e‚Çñ = Utility.e‚Çñ(n,k)
        for h in (k+1):n
            e‚Çï = Utility.e‚Çñ(n,h)
            # Localizing xx constraint: M(x‚Çñx‚Çï‚ãÖL)
            xx_con[(k,h)] = [ Lx[LMB[i] + LMB[j] + e‚Çñ + e‚Çï] for i in 1:nb_mon, j in 1:nb_mon ]
        end
    end
    return xx_con
end

## Tensor constraints
"""
Input: A(data matrix),t(Integer),Lx(JuMP variable)
Output: L((M-([x]‚Çå‚ÇÅ[x]‚Çå‚ÇÅ·µÄ))‚äó([x]‚Çå‚Çó[x]‚Çå‚Çó·µÄ)))for l ‚àà 0,1,...,t-1.
= M‚äóL([x]‚Çå‚Çó[x]‚Çå‚Çó·µÄ) - L(([x]‚Çå‚ÇÅ[x]‚Çå‚ÇÅ·µÄ)‚äó([x]‚Çå‚Çó[x]‚Çå‚Çó·µÄ))
"""
function make_weakG_con(A,t,Lx)
    n = size(A)[1]
    weakG_con = Dict()
    LMBexp_1 =  make_mon_expo_mat(n,(1,1),false)
    for ‚Ñì in 1:(t-1)
        LMBexp_‚Ñì          = Moments.make_mon_expo_mat(n,(‚Ñì,‚Ñì),false)   #exponents of [x]‚Çå‚Çó[x]‚Çå‚Çó·µÄ
        LMBexp_1‚Ñì         = Utility.var_kron(LMBexp_1,LMBexp_‚Ñì)    #exponents of([x]‚Çå‚ÇÅ[x]‚Çå‚ÇÅ·µÄ)‚äó([x]‚Çå‚Çó[x]‚Çå‚Çó·µÄ)
        LMB_‚Ñì             = Utility.index_to_var(Lx,LMBexp_‚Ñì)      # L([x]‚Çå‚Çó[x]‚Çå‚Çó·µÄ)
        LMB_1‚Ñì            = Utility.index_to_var(Lx,LMBexp_1‚Ñì)     # L(([x]‚Çå‚ÇÅ[x]‚Çå‚ÇÅ·µÄ)‚äó([x]‚Çå‚Çó[x]‚Çå‚Çó·µÄ))

        A_tens_LMB_‚Ñì      = kron(A,LMB_‚Ñì)                  # M‚äóL([x]‚Çå‚Çó[x]‚Çå‚Çó·µÄ)
        weakG_con[‚Ñì]      = A_tens_LMB_‚Ñì - LMB_1‚Ñì          # M‚äóL([x]‚Çå‚Çó[x]‚Çå‚Çó·µÄ) - L(([x]‚Çå‚ÇÅ[x]‚Çå‚ÇÅ·µÄ)‚äó([x]‚Çå‚Çó[x]‚Çå‚Çó·µÄ) ‚™∞ 0, ‚Ñì ‚àà 0,1,t-deg(g)/2
    end
    return weakG_con
end

"""M(G ‚äó L) ‚™∞ 0 constraints
input: A(data matrix),t(Integer),Lx(JuMP variable)
Assumption: G = A-[x]‚Çå‚ÇÅ[x]‚Çå‚ÇÅ·µÄ
output: A‚äóL([x]‚Çú[x]‚Çú·µÄ) - L(([x]‚Çå‚ÇÅ[x]‚Çå‚ÇÅ·µÄ)‚äó([x]‚Çú‚Çã‚ÇÅ[x]‚Çú‚Çã‚ÇÅ·µÄ)
"""
function make_G_con(A,t,Lx)
    n = size(A)[1]
    LMBexp_1           = Moments.make_mon_expo_mat(n,(1,1),false) #exponents of [x]‚Çå‚ÇÅ[x]‚Çå‚ÇÅ·µÄ
    LMBexp‚Çú‚Çã‚ÇÅ          = Moments.make_mon_expo_mat(n,(t-1,t-1),true)#exponents of [x]‚Çú‚Çã‚ÇÅ[x]‚Çú‚Çã‚ÇÅ·µÄ
    LMB‚Çú‚Çã‚ÇÅ             = Utility.index_to_var(Lx,LMBexp‚Çú‚Çã‚ÇÅ)    #L([x]‚Çú‚Çã‚ÇÅ[x]‚Çú‚Çã‚ÇÅ·µÄ)

    LMBexp_1‚Çú‚Çã‚ÇÅ        = Utility.var_kron(LMBexp_1,LMBexp‚Çú‚Çã‚ÇÅ)  #exponents of([x]‚Çå‚ÇÅ[x]‚Çå‚ÇÅ·µÄ)‚äó([x]‚Çú‚Çã‚ÇÅ[x]‚Çú‚Çã‚ÇÅ·µÄ)
    LMB_1‚Çú‚Çã‚ÇÅ           = Utility.index_to_var(Lx,LMBexp_1‚Çú‚Çã‚ÇÅ)   # L(([x]‚Çå‚ÇÅ[x]‚Çå‚ÇÅ·µÄ)‚äó([x]‚Çú‚Çã‚ÇÅ[x]‚Çú‚Çã‚ÇÅ·µÄ))

    G_con = kron(A,LMB‚Çú‚Çã‚ÇÅ) - LMB_1‚Çú‚Çã‚ÇÅ             # A‚äóL([x]‚Çú‚Çã‚ÇÅ[x]‚Çú‚Çã‚ÇÅ·µÄ) - L(([x]‚Çå‚ÇÅ[x]‚Çå‚ÇÅ·µÄ)‚äó([x]‚Çú‚Çã‚ÇÅ[x]‚Çú‚Çã‚ÇÅ·µÄ))
    return G_con
end

end
